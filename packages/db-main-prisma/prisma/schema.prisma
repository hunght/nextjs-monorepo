generator client {
  provider = "prisma-client-js"
  // output = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  DEACTIVE
  DELETED
}

enum APIType {
  THREE_COMMAS
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String?         @unique
  emailVerified          DateTime?
  image                  String?
  status                 Status          @default(ACTIVE)
  accounts               Account[]
  sessions               Session[]
  apiCredentials         APICredential[]
  tradingBots            TradingBot[]
  currentAPICredentialId String?
  currentAPICredential   APICredential?  @relation(name: "currentAPICredential", fields: [currentAPICredentialId], references: [id], onDelete: Cascade)
  role                   Role            @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model APICredential {
  id          String       @id @default(cuid())
  apiKey      String       
  status      Status
  apiSecret   String
  name        String
  type        APIType      @default(THREE_COMMAS)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tradingBots TradingBot[]
  User        User[]       @relation("currentAPICredential")
  lastSync    DateTime? 
  @@unique([apiKey, userId])
}

model TradingBot {
  id              String        @id @default(cuid())
  botId           String        
  name            String
  rawData         Json
  status          Status
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiCredentialId String
  apiCredential   APICredential @relation(fields: [apiCredentialId], references: [id])
  @@unique([botId, apiCredentialId])
}
